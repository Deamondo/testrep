1. git config --show-origin user.name -> конфиги в гите есть глобальные и локальные в каждом репозитории. --show-origin показывает текущее значение параметра который будет использован при работе с гитом
2. git config --list --show-origin -> тоже полезно. все параметры выводит, и показывает какие локальные а какие глобальные
3. remote: Support for password authentication was removed on August 13, 2021.
   fatal: Authentication failed for 'https://github.com/Deamondo/testrep/'
   такая ошибка означает что git не хочет логиниться по пароль, типа это не надежно. Для работы надо установить GCM - Git Credential Manager:
   	sudo dpkg -i <path-to-package>
	git-credential-manager configure
	
	После этого если выполнить git push, вывалится ошибка fatal: No credential store has been selected.
	Надо сконфижить еще и гит:
	git config --global credential.credentialStore secretservice
	После этого можно проконтролировать состояние с помощью git config --list.
 На винду он установился при инсталляции в процессе, поэтому все там и заработало. А в Ubuntu надо доставить и сконфижить было.
 
4. git diff -> показывает изменнения в текущих файлах по сравнению с индексированными (до add)
 	git diff --staged -> изменения индексированных файлов по сравнению с закоммиченными (после add)
 	git diff --cached -> тоже самое что и staged
5. git config core.editor code -> редактор по умолчанию, в данном случае VSCode
6. git commit -> запустит текстовый редактор (VSCode). там можно писать коментарий для коммита, но я чот не понял как сделать сам commit
7. git commit -a -m 'blablabla' -> ключ -a автоматом индексирует
8. git rm -r папка	-> если удалил файлы или папки то надо удалить их из индексирования этой командой (-r для папок)
 	git restore file/dir -> восстановить после удаления (пока еще не закоммичено)
 	git rm --cached файл -> удалить из индексирования и можно физически не удалять
 	git restore --staged файл -> восстановить из индекса удаленный предудущей командой файл
 	git rm log/\*.log -> для примера, удалить из папки log все файлы с расширением log. слэш \ - означает что то типа 'все файлы', все что за слешом - это какие файлы
9. git mv файл1 файл2 -> это переименовать файл1 в файл2
10. git log -> история коммитов. Выйти - q
	git log -p -2 -> подробные отличия, 2 последних коммита
	git log --stat -> сокращенная инфа о изменениях в  файлах, нагляднее
	git log --pretty=oneline --graph -> выведет в одну строку каждый коммит, а --graph добавит графику слияний и всего такого
11. git reset HEAD CONTRIBUTING.md -> убрать уже проиндексированый файл из индекса
12. git checkout -- CONTRIBUTING.md -> и можно востановить его из последнего коммита
13. git restore --staged <file> -> отмена индексации файла
	git restore <file> -> и восстановить файл из последнего коммита
	git restore '*' -> воостановить все файлы 
14. git clone http://gitea.local:3000/abaturov_ds/suts.git -b feature_cts_245 -> клонировать определенную ветку
15. git submodule  status - посмтреть связаные сабмодули
	cat ./.gitmodules - здесь прописаны ссылки на них. В ветке dev suts старые ссылки, их надо поправить на gitea
	git submodule init - потом выполнить это. Настройки пропишутся в git ./.git/config, проверить там тоже (git config --list)
	git submodule update - потом это, и они загрузятся
16. git branch - посмтреть текущую ветку
	git checkout main - переключиться на ветку main
	git checkout -b bla_branch - создать новую ветку 
17. git tag -a v1.4 -m "my version 1.4" -> создать аннотированый тег, полная копия всех данных
	без -a -> это легковесный тег, просто указатель на коммит
	git tag -l - посмотреть таги
	git push origin v1.0 -> запушить тег на сервер origin
18. git checkout v1.0 -> можно отпрыгнуть на тег, т.е. на несколько коммитов назад. Если теперь чтото поменять то не получится запушить это на сервер, т.к. мы не в одной из веток не находитмся. 
	git checkout -b v1.01 -> можно в этом месте создать новвую ветку через -b, и закоммитить/запушить изменения в нее
	git diff v1.01 master -> сравнить текущую ветку с мастером от которого когдато отпочковались
19. 	

