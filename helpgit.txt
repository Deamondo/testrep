1. git config --show-origin user.name -> конфиги в гите есть глобальные и локальные в каждом репозитории. --show-origin показывает текущее значение параметра который будет использован при работе с гитом
2. git config --list --show-origin -> тоже полезно. все параметры выводит, и показывает какие локальные а какие глобальные
3. remote: Support for password authentication was removed on August 13, 2021.
   fatal: Authentication failed for 'https://github.com/Deamondo/testrep/'
   такая ошибка означает что git не хочет логиниться по пароль, типа это не надежно. Для работы надо установить GCM - Git Credential Manager:
   	- скачать файл gcm-linux_amd64.2.4.1.deb
   	- sudo dpkg -i <path-to-package>
	- git-credential-manager configure
	
	После этого если выполнить git push, вывалится ошибка fatal: No credential store has been selected.
	Надо сконфижить еще и гит:
	- git config --global credential.credentialStore secretservice
	После этого можно проконтролировать состояние с помощью git config --list.
 На винду он установился при инсталляции в процессе, поэтому все там и заработало. А в Ubuntu надо доставить и сконфижить было.
 
4. git diff -> показывает изменнения в текущих файлах по сравнению с индексированными (до add)
 	git diff --staged -> изменения индексированных файлов по сравнению с закоммиченными (после add)
 	git diff --cached -> тоже самое что и staged
 	git diff dc2ff080c6 2a3bfbf09a09 -> сравнить два коммита
 	git diff 2a3bfbf09a0 611ed9c154eb -- hhhelp.txt > ../diffr.dif -> а так сравнить только нужный файл в 2 коммитах и записать разничия в файл. 
 	git diff src/config.hpp -> или так сравнить один файл
 	git apply ../diffr.dif
 	git diff br1 br2 -- ':!*.cpp' ':!*.hpp' ':!*.qml' -> вывести отличия во всех файлах кроме указаных
 	git diff tested develop --name-only - показать только имена файлов
 	git difftool -> вывести отличия в проге которая указана в diff.tool (сейчас vimdiff, команда git diff работает как обычно в консоль). Нельзя оставлять пустую строку diff.external, иначе git diff будет просто ошибку выдавать.
 	
5. git config core.editor code -> редактор по умолчанию, в данном случае VSCode
6. git commit -> запустит текстовый редактор (VSCode). там можно писать коментарий для коммита, но я чот не понял как сделать сам commit
7. git commit -a -m 'blablabla' -> ключ -a автоматом индексирует
8. git rm -r папка	-> если удалил файлы или папки то надо удалить их из индексирования этой командой (-r для папок)
 	git restore file/dir -> восстановить после удаления (пока еще не закоммичено)
 	git rm --cached файл -> удалить из индексирования, но не трогать рабочую область
 	git rm --cached `git ls-files -ic --exclude-from=.gitignore` -> удалить из индексирования все файлы которые есть в .gitignore. 
 		Если  файл был заиндексирован, а потом добавлен в gitignore, то игнор не срабатоет, файл так и будет висеть в изменениях. Надо сначала его удалить из индекса.
 	git restore --staged файл -> восстановить из индекса удаленный предудущей командой файл
 	git rm log/\*.log -> для примера, удалить из папки log все файлы с расширением log. слэш \ - означает что то типа 'все файлы', все что за слешом - это какие файлы
9. git mv файл1 файл2 -> это переименовать файл1 в файл2
10. git log -> история коммитов. Выйти - q
	git log -p -2 -> подробные отличия, 2 последних коммита
	git log --stat -> сокращенная инфа о изменениях в  файлах, нагляднее
	git log --pretty=oneline --graph -> выведет в одну строку каждый коммит, а --graph добавит графику слияний и всего такого
11. git reset HEAD CONTRIBUTING.md -> убрать уже проиндексированый файл из индекса
12. git checkout -- CONTRIBUTING.md -> и можно востановить его из последнего коммита
13. git restore --staged <file> -> отмена индексации файла
	git restore <file> -> и восстановить файл в рабочей области из последнего индекса
	git restore '*' -> воостановить все файлы 
14. git clone http://gitea.local:3000/abaturov_ds/suts.git -b feature_cts_245 -> клонировать определенную ветку
15. git submodule  status - посмтреть связаные сабмодули
	git rm <submodule_name> - удалить ненужный сабмодуль 
	git add <url> <submodule_name> - добавить новый сабмодуль
	cat ./.gitmodules - здесь прописаны ссылки на них. В ветке dev suts старые ссылки, их надо поправить на gitea
	git submodule init - потом выполнить это. Настройки пропишутся в git ./.git/config, проверить там тоже (git config --list)
	git submodule update - потом это, и они загрузятся
16. git branch - посмтреть текущую ветку
	git checkout main - переключиться на ветку main
	git checkout -b bla_branch - создать новую ветку 
17. git tag -a v1.4 -m "my version 1.4" -> создать аннотированый тег, полная копия всех данных
	без -a -> это легковесный тег, просто указатель на коммит
	git tag -a v1.2 9fceb02 -> создать тег из нужного коммита
	git tag -l -> посмотреть таги
	git push --delete origin v2.6.1 -> удалить remote tag
	git push origin v1.0 -> запушить тег на сервер origin
18. git checkout v1.0 -> можно отпрыгнуть на тег, т.е. на несколько коммитов назад. Если теперь чтото поменять то не получится запушить это на сервер, т.к. мы не в одной из веток не находитмся. 
	git checkout -b v1.01 -> можно в этом месте создать новвую ветку через -b, и закоммитить/запушить изменения в нее
	git diff v1.01 master -> сравнить текущую ветку с мастером от которого когдато отпочковались
19. 	
20. git checkout 73fde3d4defb2b8 -> откатиться до нужного коммита
	git checkout -b newbranch -> потом создать новую ветку
	git push --set-upstream origin newbranch -> можно пушить
21. отличия git reset: перемещаются указатели и HEAD и main. Checkout переносит только указатель HEAD и меняет содержимое рабочей папки на соответствующий коммит; получается состояние detached HEAD, нельзя пушить просто так, надо создать новую ветку
	git reset 1766c09229 -> это reset по умолчанию, т.е. --mixed. Откатываются дерево коммитов и дерево идексаций, но рабочая папка остается неизменной.
	git reset --hard 1766c09229 -> откатит и  рабочий каталог до коммита 1766c09229. Все изменения будут потеряны. Если сейчас закоммитить то все коммиты между 1766c09229 и бывшим HEAD будут затерты и добавлен новый коммит
22. git log --oneline --graph bla_branch -> посмотреть коммиты только из ветки bla_branch
23. ~/.gitconfig -> [alias] 
			tree = log --graph --pretty=oneline -> теперь эту команду можно вызывать по alias
24. 	git tree new_githelp
	git tree 0092aa0e4615
	git tree master..716995493b529d5d -> раньше..позже
	git tree 0092aa0e4615..master --ancestry-path -> 
	git branch --contains 0d1b951f58a20
25. git branch -D new_hhhelp	-> удалить локальную ветку 
	git push origin --delete new_hhhelp -> удалить удаленную ветку
26. for aaa in `git branch -r`; do git branch --track ${aaa#origin/} $aaa; done -> 
27. перенос репозитория:
	git clone https://github.com/Deamondo/testrep.git
	git remote add bla-origin https://github.com/Deamondo/bls_testrep.git
	команда 26
	git push --mirror bla-origin
	git remote rm bla-origin
	
28. git branch --track fix_CTS-51 -> 
29. git clone https://github.com/Deamondo/testrep.git . -> точка в конце означает клонировать без создания подпапки testrep

30. git grep sound '*.cpp' - искать (поиск) по файлам cpp cлово 'sound'
	git grep -p sound '*.cpp' - -p добавит в вывод еще информацию о функциях в которых нашелся 'sound'
	-n - номера строк
	git grep --break --heading -p sound dev - искать в dev слово 'sound', --break - вставлять пустые строки между найденным, --heading - писать имя файла только один раз в начале
	git log --oneline -S sound - найти коммиты в которых были добавлено/удалено 'sound'
	
31. git blame -L 100,200 client.cpp - посмотреть кто (автор) добавил строки и в каком коммите
32. 	git bisect start - начать бинарный поиск. Это для того чтобы найти коммит в котором возникла проблема, если мы точно не знаем когда она возникла;
	git bisect bad - текущий коммит признан сломаным, в коде есть проблема;
	git bisect good v1.0 - этот коммит заведомо рабочий. В этот момент гит переключится на коммит посередине между плохим и хорошим.
	git bisect good или git bisect bad - в зависимости от тестов признать текущий коммит плохим или хорошим. Тогда гит автоматом переключится на коммит посередине новыми хорошим и плохим. так проделать пока не найдется коммит в котором сломалось то что мы ищем.
	git bisect reset - в конце не забыть выполнить эту команду чтобы вернуться на HEAD
33. git rebase -i HEAD~2 - для объединения нескольких коммитов в один. -i - интерактивный режим. 
В результате команды будет выведено:
	pick bcdca61 prev commit
	pick 4643a5f last commit
Надо заменить "pick" на "s" (squash) для второго коммита:
	pick bcdca61 prev commit
	s 4643a5f last commit
Сохранить, выйти. Во вновь открывшемся файле ввести текст для нового коммита. Сохранить, и вуаля!
34. git stash - сохранить изменения в отдельное хранилище
	git stash save "Какое-нибудь сообщение" - тоже самое только еще с опциями
	git stash list -  список текущих сохранялок	
	git stash apply - восстановить последнее
35. создание нового удаленного репозитория из ветки
	git remote -v -> посмотреть список текущих remote-репозиториев
	git checkout v1.1.38 -> перпеключиться на нужную ветку
	git remote remove origin -> удалить текущий remote-репозиторий ( под именем origin )
	git remote add origin ssh://git@gitlab.radar-mms.inter:766/01311/suts703.git -> добавить новый remote-репозиторий под именем origin, который будет ссылаться на url ssh://git@gitlab.radar-mms.inter:766/01311/suts703.git
	git push -u origin v1.1.38 -> запушить его
	git remote show origin	-> проверить содержимое удаленного репозитория
	
36. git show a2c25061 -> показать нужный коммит



